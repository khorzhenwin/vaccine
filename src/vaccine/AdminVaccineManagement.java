/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vaccine;

import java.awt.event.KeyEvent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import vaccine.Class.*;

/**
 *
 * @author user
 */
public class AdminVaccineManagement extends javax.swing.JFrame {

   /**
    * Creates new form AdminVaccineManagement
    */
   public AdminVaccineManagement() {
      initComponents();

      DataIO.read();

      // ------------ Table Information ------------
      DefaultTableModel model = (DefaultTableModel) tblVaccine.getModel();
      model.setRowCount(0);
      for (int i = 0; i < DataIO.allVaccines.size(); i++) {
         String centreID = String.valueOf(DataIO.allVaccines.get(i).getCentre().getCentreId());
         String centreName = DataIO.allVaccines.get(i).getCentre().getCentreName();
         String centreStatus = DataIO.allVaccines.get(i).getCentre().getStatus();
         String vaccineID = String.valueOf(DataIO.allVaccines.get(i).getVaccineID());
         String vaccineName = DataIO.allVaccines.get(i).getVaccineName();
         String amount = String.valueOf(DataIO.allVaccines.get(i).getInventory());
         String array[] = {centreID, centreName, centreStatus, vaccineID, vaccineName, amount};
         model.addRow(array);
      }
      tblVaccine.getColumnModel().getColumn(0).setMinWidth(0);
      tblVaccine.getColumnModel().getColumn(0).setMaxWidth(0);
      tblVaccine.getColumnModel().getColumn(3).setMinWidth(0);
      tblVaccine.getColumnModel().getColumn(3).setMaxWidth(0);

      // ------------ ComboBox Information ------------
      DefaultComboBoxModel comboBoxModel = (DefaultComboBoxModel) cmbCentreName.getModel();
      comboBoxModel.removeAllElements();
      for (int i = 0; i < DataIO.allCentres.size(); i++) {
         if (DataIO.allCentres.get(i).getStatus().equals("Active")) {
            comboBoxModel.addElement(DataIO.allCentres.get(i).getCentreName());
         }
      }
      String selectedCentre = comboBoxModel.getSelectedItem().toString();
      Centre selected = DataIO.checkCentre(selectedCentre);
      txtCentreID.setText(String.valueOf(selected.getCentreId()));
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel3 = new javax.swing.JLabel();
      btnBack = new javax.swing.JButton();
      jPanel1 = new javax.swing.JPanel();
      jLabel2 = new javax.swing.JLabel();
      btnCreate = new javax.swing.JButton();
      txtSearch = new javax.swing.JTextField();
      jLabel4 = new javax.swing.JLabel();
      btnUpdate = new javax.swing.JButton();
      btnRefresh = new javax.swing.JButton();
      txtVaccineName = new javax.swing.JTextField();
      jLabel6 = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      tblVaccine = new javax.swing.JTable();
      jLabel7 = new javax.swing.JLabel();
      btnClear = new javax.swing.JButton();
      jLabel5 = new javax.swing.JLabel();
      txtAmount = new javax.swing.JTextField();
      txtVaccineID = new javax.swing.JTextField();
      jLabel8 = new javax.swing.JLabel();
      cmbCentreName = new javax.swing.JComboBox<>();
      txtCentreID = new javax.swing.JTextField();
      btnDelete = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setResizable(false);

      jLabel3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
      jLabel3.setText("Vaccine Inventory Management");
      jLabel3.setToolTipText("");
      jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

      btnBack.setText("Back ‚û§");
      btnBack.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnBackActionPerformed(evt);
         }
      });

      jLabel2.setText("Centre Name");

      btnCreate.setText("Create");
      btnCreate.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnCreateActionPerformed(evt);
         }
      });

      txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyReleased(java.awt.event.KeyEvent evt) {
            txtSearchKeyReleased(evt);
         }
      });

      jLabel4.setText("Vaccine Name");

      btnUpdate.setText("Update");
      btnUpdate.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnUpdateActionPerformed(evt);
         }
      });

      btnRefresh.setText("Refresh");
      btnRefresh.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnRefreshActionPerformed(evt);
         }
      });

      jLabel6.setText("üîç");

      tblVaccine.setAutoCreateRowSorter(true);
      tblVaccine.setForeground(new java.awt.Color(51, 51, 51));
      tblVaccine.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {
            {null, null, null, null, null, null},
            {null, null, null, null, null, null},
            {null, null, null, null, null, null},
            {null, null, null, null, null, null}
         },
         new String [] {
            "CentreID", "CentreName", "CentreStatus", "VaccineID", "VaccineName", "Amount"
         }
      ) {
         boolean[] canEdit = new boolean [] {
            false, false, false, false, false, false
         };

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
         }
      });
      tblVaccine.setSelectionBackground(new java.awt.Color(153, 153, 255));
      tblVaccine.setSelectionForeground(new java.awt.Color(51, 51, 51));
      tblVaccine.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      tblVaccine.getTableHeader().setReorderingAllowed(false);
      tblVaccine.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            tblVaccineMouseClicked(evt);
         }
      });
      jScrollPane1.setViewportView(tblVaccine);

      jLabel7.setText("Centre ID");

      btnClear.setText("Clear");
      btnClear.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnClearActionPerformed(evt);
         }
      });

      jLabel5.setText("Amount   :");

      txtAmount.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            txtAmountKeyPressed(evt);
         }
         public void keyTyped(java.awt.event.KeyEvent evt) {
            txtAmountKeyTyped(evt);
         }
      });

      txtVaccineID.setDisabledTextColor(new java.awt.Color(102, 102, 102));
      txtVaccineID.setEnabled(false);

      jLabel8.setText("Vaccine ID");

      cmbCentreName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
      cmbCentreName.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cmbCentreNameItemStateChanged(evt);
         }
      });

      txtCentreID.setDisabledTextColor(new java.awt.Color(102, 102, 102));
      txtCentreID.setEnabled(false);

      btnDelete.setText("Delete");
      btnDelete.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnDeleteActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                     .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txtCentreID, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtVaccineID, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtVaccineName, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAmount))
                     .addComponent(cmbCentreName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addComponent(txtSearch))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))))
            .addContainerGap())
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel7)
               .addComponent(jLabel8)
               .addComponent(txtVaccineID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(txtCentreID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(cmbCentreName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(txtVaccineName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel4)
               .addComponent(jLabel5)
               .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(btnCreate)
               .addComponent(btnUpdate)
               .addComponent(btnClear)
               .addComponent(btnDelete))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(btnRefresh)
               .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(20, Short.MAX_VALUE))
      );

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(54, 54, 54)
                  .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(0, 45, Short.MAX_VALUE))
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(135, 135, 135))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(btnBack)
            .addGap(27, 27, 27)
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      pack();
      setLocationRelativeTo(null);
   }// </editor-fold>//GEN-END:initComponents

   private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
      AdminMain a = new AdminMain();
      a.setVisible(true);
      this.dispose();
   }//GEN-LAST:event_btnBackActionPerformed

   private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
      int confirmReg = JOptionPane.showConfirmDialog(this, "Create new Vaccine Inventory?", "Confirm Creation?", JOptionPane.YES_NO_OPTION);
      if (confirmReg == JOptionPane.YES_OPTION) {
         // allow only if a row is not selected
         if (tblVaccine.getSelectionModel().isSelectionEmpty() || txtVaccineID.getText().isBlank()) {
            // empty fields validation
            if (txtVaccineName.getText().isBlank()
                    || txtAmount.getText().isBlank()) {
               JOptionPane.showMessageDialog(btnCreate, "Please fill in all the fields!");
            } else {
               Centre found = DataIO.checkCentre(Integer.valueOf(txtCentreID.getText().trim()));
               VaccineSupply inventory = new VaccineSupply(DataIO.getVaccineSize() + 1,
                       txtVaccineName.getText().trim(),
                       Integer.valueOf(txtAmount.getText().trim()),
                       found);
               DataIO.allVaccines.add(inventory);
               found.getMyInventory().add(inventory);
               DataIO.write();
               JOptionPane.showMessageDialog(btnCreate, "Inventory has been created for " + found.getCentreName());
               btnRefreshActionPerformed(evt);
            }
         } else {
            JOptionPane.showMessageDialog(btnCreate, "Please unselect the row");
         }
      }
   }//GEN-LAST:event_btnCreateActionPerformed

   private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
      DefaultTableModel model = (DefaultTableModel) tblVaccine.getModel();
      String input = txtSearch.getText();
      TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
      tblVaccine.setRowSorter(tr);
      tr.setRowFilter(RowFilter.regexFilter(input));
   }//GEN-LAST:event_txtSearchKeyReleased

   private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
      if (txtVaccineID.getText().isBlank()) {
         JOptionPane.showMessageDialog(btnUpdate, "Select a centre to update!");
      } else {
         int confirmUpdate = JOptionPane.showConfirmDialog(this, "Update Centre", "Save Changes?", JOptionPane.YES_NO_OPTION);
         if (confirmUpdate == JOptionPane.YES_OPTION) {

            Vaccine.inventory = DataIO.checkSupply(Integer.valueOf(txtVaccineID.getText().trim()));
            // empty fields validation
            if (txtVaccineName.getText().isBlank()
                    || txtAmount.getText().isBlank()) {
               JOptionPane.showMessageDialog(btnCreate, "Please fill in all the fields!");
            } else {
               Vaccine.inventory.setVaccineName(txtVaccineName.getText().trim());
               Vaccine.inventory.setInventory(Integer.valueOf(txtAmount.getText().trim()));
               DataIO.write();
               JOptionPane.showMessageDialog(btnUpdate, "Updated Successfully!");
               btnRefreshActionPerformed(evt);
            }

         }
      }
   }//GEN-LAST:event_btnUpdateActionPerformed

   private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed

      // ------------ Table Information ------------
      DefaultTableModel model = (DefaultTableModel) tblVaccine.getModel();
      model.setRowCount(0);
      for (int i = 0; i < DataIO.allVaccines.size(); i++) {
         String centreID = String.valueOf(DataIO.allVaccines.get(i).getCentre().getCentreId());
         String centreName = DataIO.allVaccines.get(i).getCentre().getCentreName();
         String centreStatus = DataIO.allVaccines.get(i).getCentre().getStatus();
         String vaccineID = String.valueOf(DataIO.allVaccines.get(i).getVaccineID());
         String vaccineName = DataIO.allVaccines.get(i).getVaccineName();
         String amount = String.valueOf(DataIO.allVaccines.get(i).getInventory());
         String array[] = {centreID, centreName, centreStatus, vaccineID, vaccineName, amount};
         model.addRow(array);
      }
      tblVaccine.getColumnModel().getColumn(0).setMinWidth(0);
      tblVaccine.getColumnModel().getColumn(0).setMaxWidth(0);
      tblVaccine.getColumnModel().getColumn(3).setMinWidth(0);
      tblVaccine.getColumnModel().getColumn(3).setMaxWidth(0);

      btnClearActionPerformed(evt);

      TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
      tblVaccine.setRowSorter(tr);
      tr.setRowFilter(RowFilter.regexFilter(""));
   }//GEN-LAST:event_btnRefreshActionPerformed

   private void tblVaccineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblVaccineMouseClicked
      DefaultComboBoxModel comboBoxModel = (DefaultComboBoxModel) cmbCentreName.getModel();
      comboBoxModel.removeAllElements();
      cmbCentreName.enable(false);
      comboBoxModel.addElement(tblVaccine.getValueAt(tblVaccine.getSelectedRow(), 1).toString());
      txtCentreID.setText(tblVaccine.getValueAt(tblVaccine.getSelectedRow(), 0).toString());
      txtVaccineID.setText(tblVaccine.getValueAt(tblVaccine.getSelectedRow(), 3).toString());
      txtVaccineName.setText(tblVaccine.getValueAt(tblVaccine.getSelectedRow(), 4).toString());
      txtAmount.setText(tblVaccine.getValueAt(tblVaccine.getSelectedRow(), 5).toString());
   }//GEN-LAST:event_tblVaccineMouseClicked

   private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
      DefaultComboBoxModel comboBoxModel = (DefaultComboBoxModel) cmbCentreName.getModel();
      comboBoxModel.removeAllElements();
      for (int i = 0; i < DataIO.allCentres.size(); i++) {
         if (DataIO.allCentres.get(i).getStatus().equals("Active")) {
            comboBoxModel.addElement(DataIO.allCentres.get(i).getCentreName());
         }
      }
      String selectedCentre = comboBoxModel.getSelectedItem().toString();
      Centre selected = DataIO.checkCentre(selectedCentre);

      txtCentreID.setText(String.valueOf(selected.getCentreId()));
      cmbCentreName.enable(true);
      txtVaccineName.setText("");
      txtVaccineID.setText("");
      txtAmount.setText("");
      txtSearch.setText("");
      tblVaccine.getSelectionModel().clearSelection();
   }//GEN-LAST:event_btnClearActionPerformed

   private void cmbCentreNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCentreNameItemStateChanged
      DefaultComboBoxModel comboBoxModel = (DefaultComboBoxModel) cmbCentreName.getModel();
      if (comboBoxModel.getSelectedItem() != null) {
         String selectedCentre = comboBoxModel.getSelectedItem().toString();
         Centre selected = DataIO.checkCentre(selectedCentre);
         txtCentreID.setText(String.valueOf(selected.getCentreId()));
      }

   }//GEN-LAST:event_cmbCentreNameItemStateChanged

   private void txtAmountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAmountKeyPressed
      char c = evt.getKeyChar();
      if ((c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE)) {
         txtAmount.setEditable(true);
      } else if (Character.isLetter(c) || !((c >= '0') && (c <= '9'))) {
         txtAmount.setEditable(false);
      } else {
         txtAmount.setEditable(true);
      }
   }//GEN-LAST:event_txtAmountKeyPressed

   private void txtAmountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAmountKeyTyped
      boolean maxno = txtAmount.getText().length() > 6;
      if (maxno) {
         evt.consume();
      }
   }//GEN-LAST:event_txtAmountKeyTyped

   private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
      int confirmDelete = JOptionPane.showConfirmDialog(this, "Delete Inventory for this Centre?", "Confirm Deletion?", JOptionPane.YES_NO_OPTION);
      if (confirmDelete == JOptionPane.YES_OPTION) {
         // allow only if a row is not selected
         if (!tblVaccine.getSelectionModel().isSelectionEmpty() || !txtVaccineID.getText().isBlank()) {
            Vaccine.inventory = DataIO.checkSupply(Integer.valueOf(txtVaccineID.getText().trim()));
            // removing record from DataIO array list
            for (int i = 0; i < DataIO.allVaccines.size(); i++) {
               if (Vaccine.inventory == DataIO.allVaccines.get(i)) {
                  DataIO.allVaccines.remove(i);
                  // removing record from Centre Array List
                  for (int j = 0; j < Vaccine.inventory.getCentre().getMyInventory().size(); j++) {
                     if (Vaccine.inventory.getCentre() == Vaccine.inventory.getCentre().getMyInventory().get(j).getCentre()) {
                        Vaccine.inventory.getCentre().getMyInventory().remove(j);
                     }
                  }
                  break;
               }
            }
            DataIO.write();
            JOptionPane.showMessageDialog(btnDelete, "Deleted Successfully!");
            btnRefreshActionPerformed(evt);
         } else {
            JOptionPane.showMessageDialog(btnDelete, "Please select a row");
         }
      }
   }//GEN-LAST:event_btnDeleteActionPerformed

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
      /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(AdminVaccineManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(AdminVaccineManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(AdminVaccineManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(AdminVaccineManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            new AdminVaccineManagement().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnBack;
   private javax.swing.JButton btnClear;
   private javax.swing.JButton btnCreate;
   private javax.swing.JButton btnDelete;
   private javax.swing.JButton btnRefresh;
   private javax.swing.JButton btnUpdate;
   private javax.swing.JComboBox<String> cmbCentreName;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JTable tblVaccine;
   private javax.swing.JTextField txtAmount;
   private javax.swing.JTextField txtCentreID;
   private javax.swing.JTextField txtSearch;
   private javax.swing.JTextField txtVaccineID;
   private javax.swing.JTextField txtVaccineName;
   // End of variables declaration//GEN-END:variables
}
