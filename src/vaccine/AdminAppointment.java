/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vaccine;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import vaccine.Class.Appointment;
import vaccine.Class.Centre;
import vaccine.Class.DataIO;
import vaccine.Class.People;
import vaccine.Class.VaccineSupply;

/**
 *
 * @author User
 */
public class AdminAppointment extends javax.swing.JFrame {

   /**
    * Creates new form admin_appointment
    */
   public AdminAppointment() {
      initComponents();
      // ------------ Table Information ------------
      DefaultTableModel model = (DefaultTableModel) tblAppointment.getModel();
      model.setRowCount(0);
      for (int i = 0; i < DataIO.allAppointments.size(); i++) {
         String icno = DataIO.allAppointments.get(i).getPerson().getIcno();
         String personName = DataIO.allAppointments.get(i).getPerson().getName();
         String centreName = DataIO.allAppointments.get(i).getLocation().getCentreName();
         String vaccineName = DataIO.allAppointments.get(i).getVaccineName();
         String date1 = DataIO.allAppointments.get(i).getDate1();
         String time1 = DataIO.allAppointments.get(i).getTime1();
         String date2 = DataIO.allAppointments.get(i).getDate2();
         String time2 = DataIO.allAppointments.get(i).getTime2();

         String dose = DataIO.checkDoses(icno);
         String array[] = {icno, personName, centreName, vaccineName, date1, time1, date2, time2, dose};
         model.addRow(array);
      }
      // recipient, centre, vaccine
      tblAppointment.getColumnModel().getColumn(1).setMinWidth(0);
      tblAppointment.getColumnModel().getColumn(1).setMaxWidth(0);
      tblAppointment.getColumnModel().getColumn(2).setMinWidth(0);
      tblAppointment.getColumnModel().getColumn(2).setMaxWidth(0);
      tblAppointment.getColumnModel().getColumn(3).setMinWidth(0);
      tblAppointment.getColumnModel().getColumn(3).setMaxWidth(0);

      // ------------ ComboBox Information ------------
      DefaultComboBoxModel comboCentre = (DefaultComboBoxModel) cmbCentreName.getModel();
      DefaultComboBoxModel comboVaccine = (DefaultComboBoxModel) cmbVaccineName.getModel();
      DefaultComboBoxModel comboTime1 = (DefaultComboBoxModel) cmbTimeSlot1.getModel();
      comboCentre.removeAllElements();
      comboVaccine.removeAllElements();
      comboTime1.removeAllElements();
      // setting Centre dropdown values
      for (int i = 0; i < DataIO.allCentres.size(); i++) {
         if (DataIO.allCentres.get(i).getStatus().equals("Active") && DataIO.allCentres.get(i).getMyInventory() != null) {
            comboCentre.addElement(DataIO.allCentres.get(i).getCentreName());
            lblCentreID.setText(String.valueOf(DataIO.allCentres.get(i).getCentreId()));
         }
      }
      // setting Vaccine Name dropdown values
      if (comboCentre.getSize() == 0) {
         comboCentre.addElement("No Centres available");
      } else {
         Vaccine.editCentre = DataIO.checkCentre(comboCentre.getSelectedItem().toString());
         for (int j = 0; j < DataIO.allVaccines.size(); j++) {
            if (Vaccine.editCentre.getCentreId() == DataIO.allVaccines.get(j).getCentre().getCentreId()) {
               if (DataIO.allVaccines.get(j).getInventory() >= 2) {
                  Vaccine.editCentre.getMyInventory().add(DataIO.allVaccines.get(j));

                  comboVaccine.addElement(DataIO.allVaccines.get(j).getVaccineName());
               }
            }
         }
      }
      // set up date chooser
      dtpDate1.setMinSelectableDate(new Date());
      // set up time dropdown values
      String[] time1 = DataIO.getTimeSlot1();
      for (String slot : time1) {
         comboTime1.addElement(slot);
      }
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      lblCentreID = new javax.swing.JLabel();
      lblVaccineID = new javax.swing.JLabel();
      jLabel12 = new javax.swing.JLabel();
      btnBack = new javax.swing.JButton();
      jPanel1 = new javax.swing.JPanel();
      jLabel11 = new javax.swing.JLabel();
      txtIC = new javax.swing.JTextField();
      cmbTimeSlot1 = new javax.swing.JComboBox<>();
      jLabel13 = new javax.swing.JLabel();
      jLabel14 = new javax.swing.JLabel();
      cmbCentreName = new javax.swing.JComboBox<>();
      cmbVaccineName = new javax.swing.JComboBox<>();
      dtpDate2 = new com.toedter.calendar.JDateChooser();
      jLabel15 = new javax.swing.JLabel();
      jLabel16 = new javax.swing.JLabel();
      jLabel17 = new javax.swing.JLabel();
      txtTimeSlot2 = new javax.swing.JTextField();
      dtpDate1 = new com.toedter.calendar.JDateChooser();
      jLabel18 = new javax.swing.JLabel();
      btnClear = new javax.swing.JButton();
      btnCreate = new javax.swing.JButton();
      txtSearch = new javax.swing.JTextField();
      btnUpdate = new javax.swing.JButton();
      btnRefresh = new javax.swing.JButton();
      jLabel19 = new javax.swing.JLabel();
      btnDelete = new javax.swing.JButton();
      txtName = new javax.swing.JTextField();
      jLabel20 = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      tblAppointment = new javax.swing.JTable();

      lblCentreID.setBackground(new java.awt.Color(255, 255, 255));
      lblCentreID.setFont(new java.awt.Font("Dialog", 0, 3)); // NOI18N
      lblCentreID.setForeground(new java.awt.Color(255, 255, 255));
      lblCentreID.setEnabled(false);
      lblCentreID.setFocusable(false);
      lblCentreID.setInheritsPopupMenu(false);
      lblCentreID.setRequestFocusEnabled(false);
      lblCentreID.setVerifyInputWhenFocusTarget(false);
      lblCentreID.addInputMethodListener(new java.awt.event.InputMethodListener() {
         public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
         }
         public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            lblCentreIDInputMethodTextChanged(evt);
         }
      });
      lblCentreID.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
         public void propertyChange(java.beans.PropertyChangeEvent evt) {
            lblCentreIDPropertyChange(evt);
         }
      });

      lblVaccineID.setBackground(new java.awt.Color(255, 255, 255));
      lblVaccineID.setFont(new java.awt.Font("Dialog", 0, 3)); // NOI18N
      lblVaccineID.setForeground(new java.awt.Color(255, 255, 255));
      lblVaccineID.setEnabled(false);
      lblVaccineID.setFocusable(false);
      lblVaccineID.setInheritsPopupMenu(false);
      lblVaccineID.setRequestFocusEnabled(false);
      lblVaccineID.setVerifyInputWhenFocusTarget(false);

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setResizable(false);

      jLabel12.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
      jLabel12.setText("Appointment Management");
      jLabel12.setToolTipText("");
      jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

      btnBack.setText("Back ➤");
      btnBack.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnBackActionPerformed(evt);
         }
      });

      jLabel11.setText("IC No");

      txtIC.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusLost(java.awt.event.FocusEvent evt) {
            txtICFocusLost(evt);
         }
      });

      cmbTimeSlot1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
      cmbTimeSlot1.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cmbTimeSlot1ItemStateChanged(evt);
         }
      });

      jLabel13.setText("1st Dose Date");

      jLabel14.setText("Centre Name");

      cmbCentreName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
      cmbCentreName.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cmbCentreNameItemStateChanged(evt);
         }
      });
      cmbCentreName.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            cmbCentreNameMouseClicked(evt);
         }
      });

      cmbVaccineName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
      cmbVaccineName.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cmbVaccineNameItemStateChanged(evt);
         }
      });

      dtpDate2.setBackground(new java.awt.Color(204, 204, 204));
      dtpDate2.setForeground(new java.awt.Color(0, 0, 0));
      dtpDate2.setDateFormatString("dd/MM/yyyy");
      dtpDate2.setEnabled(false);
      dtpDate2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
         public void propertyChange(java.beans.PropertyChangeEvent evt) {
            dtpDate2PropertyChange(evt);
         }
      });

      jLabel15.setText("Vaccine Name");

      jLabel16.setText("Time Slot");

      jLabel17.setText("2nd Dose Date");

      txtTimeSlot2.setDisabledTextColor(new java.awt.Color(102, 102, 102));
      txtTimeSlot2.setEnabled(false);

      dtpDate1.setDateFormatString("dd/MM/yyyy");
      dtpDate1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
         public void propertyChange(java.beans.PropertyChangeEvent evt) {
            dtpDate1PropertyChange(evt);
         }
      });

      jLabel18.setText("Time Slot");

      btnClear.setText("Clear");
      btnClear.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnClearActionPerformed(evt);
         }
      });

      btnCreate.setText("Create");
      btnCreate.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnCreateActionPerformed(evt);
         }
      });

      txtSearch.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtSearchActionPerformed(evt);
         }
      });
      txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyReleased(java.awt.event.KeyEvent evt) {
            txtSearchKeyReleased(evt);
         }
      });

      btnUpdate.setText("Update");
      btnUpdate.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnUpdateActionPerformed(evt);
         }
      });

      btnRefresh.setText("Refresh");
      btnRefresh.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnRefreshActionPerformed(evt);
         }
      });

      jLabel19.setText("🔍");

      btnDelete.setText("Delete");
      btnDelete.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnDeleteActionPerformed(evt);
         }
      });

      txtName.setEnabled(false);

      jLabel20.setText("Recipient Name");

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addComponent(txtSearch))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(txtIC, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(12, 12, 12)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(dtpDate1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmbTimeSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(txtTimeSlot2)
                     .addComponent(dtpDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                     .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cmbCentreName, 0, 382, Short.MAX_VALUE)
                        .addComponent(cmbVaccineName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                     .addComponent(txtName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap())
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(txtIC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel11))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel20))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(cmbCentreName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel14))
            .addGap(6, 6, 6)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(cmbVaccineName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel15))
            .addGap(18, 18, 18)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(dtpDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel13)
               .addComponent(jLabel17)
               .addComponent(dtpDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(cmbTimeSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jLabel18))
               .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(txtTimeSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jLabel16)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(btnCreate)
               .addComponent(btnUpdate)
               .addComponent(btnClear)
               .addComponent(btnDelete))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(btnRefresh)
               .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
      );

      tblAppointment.setAutoCreateRowSorter(true);
      tblAppointment.setBackground(new java.awt.Color(204, 204, 204));
      tblAppointment.setForeground(new java.awt.Color(0, 0, 0));
      tblAppointment.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null}
         },
         new String [] {
            "IC No", "Recipient", "Centre", "Vaccine", "Date 1", "TimeSlot 1", "Date 2", "TimeSlot2", "Doses"
         }
      ) {
         boolean[] canEdit = new boolean [] {
            false, false, false, false, false, false, false, false, false
         };

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
         }
      });
      tblAppointment.setGridColor(new java.awt.Color(204, 204, 204));
      tblAppointment.setSelectionBackground(new java.awt.Color(153, 204, 255));
      tblAppointment.setSelectionForeground(new java.awt.Color(51, 51, 51));
      tblAppointment.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      tblAppointment.setShowHorizontalLines(false);
      tblAppointment.setShowVerticalLines(false);
      tblAppointment.getTableHeader().setReorderingAllowed(false);
      tblAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            tblAppointmentMouseClicked(evt);
         }
      });
      jScrollPane1.setViewportView(tblAppointment);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(63, 63, 63)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(109, 109, 109)
                  .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(0, 101, Short.MAX_VALUE))
               .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
            .addGap(79, 79, 79))
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(btnBack)
            .addGap(10, 10, 10)
            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(15, 15, 15))
      );

      pack();
      setLocationRelativeTo(null);
   }// </editor-fold>//GEN-END:initComponents

   private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
      AdminMain a = new AdminMain();
      a.setVisible(true);
      this.dispose();
   }//GEN-LAST:event_btnBackActionPerformed

   private void cmbTimeSlot1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTimeSlot1ItemStateChanged
      DefaultComboBoxModel comboTime1 = (DefaultComboBoxModel) cmbTimeSlot1.getModel();
      if (comboTime1.getSelectedItem() != null) {
         String selected = comboTime1.getSelectedItem().toString().trim();
         String[] time1 = DataIO.getTimeSlot1();
         String[] time2 = DataIO.getTimeSlot2();
         int index = 0;
         for (int i = 0; i < time1.length; i++) {
            if (selected.equals(time1[i])) {
               index = i;
            }
         }
         txtTimeSlot2.setText(time2[index]);
      }
   }//GEN-LAST:event_cmbTimeSlot1ItemStateChanged

   private void cmbCentreNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCentreNameItemStateChanged
      DefaultComboBoxModel comboBoxModel = (DefaultComboBoxModel) cmbCentreName.getModel();
      if (comboBoxModel.getSelectedItem() != null) {
         String selectedCentre = comboBoxModel.getSelectedItem().toString();
         Centre selected = DataIO.checkCentre(selectedCentre);
         lblCentreID.setText(String.valueOf(selected.getCentreId()));
      }
   }//GEN-LAST:event_cmbCentreNameItemStateChanged

   private void cmbVaccineNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbVaccineNameItemStateChanged
      DefaultComboBoxModel comboBoxModel = (DefaultComboBoxModel) cmbVaccineName.getModel();
      if (comboBoxModel.getSelectedItem() != null) {
         String selectedVaccine = cmbVaccineName.getSelectedItem().toString();
         VaccineSupply type = DataIO.checkSupply(cmbCentreName.getSelectedItem().toString(), selectedVaccine);
         lblVaccineID.setText(String.valueOf(type.getVaccineID()));
      }
   }//GEN-LAST:event_cmbVaccineNameItemStateChanged

   private void dtpDate2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dtpDate2PropertyChange
      // TODO add your handling code here:
   }//GEN-LAST:event_dtpDate2PropertyChange

   private void dtpDate1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dtpDate1PropertyChange
      if (dtpDate1.getDate() != null) {
         Calendar c = Calendar.getInstance();
         c.setTime(dtpDate1.getDate());
         c.add(Calendar.DATE, 21);
         Date futureDate = c.getTime();
         dtpDate2.setDate(futureDate);

      }
   }//GEN-LAST:event_dtpDate1PropertyChange

   private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
      txtIC.setText("");
      txtName.setText("");
      cmbCentreName.setSelectedIndex(0);
      cmbVaccineName.setSelectedIndex(0);
      cmbTimeSlot1.setSelectedIndex(0);
      dtpDate1.setDate(null);
      dtpDate2.setDate(null);
      txtSearch.setText("");
      tblAppointment.getSelectionModel().clearSelection();
      DefaultTableModel model = (DefaultTableModel) tblAppointment.getModel();
      TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
      tblAppointment.setRowSorter(tr);
      tr.setRowFilter(RowFilter.regexFilter(""));
      txtIC.setEnabled(true);
   }//GEN-LAST:event_btnClearActionPerformed

   private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
      int confirmCreate = JOptionPane.showConfirmDialog(this, "Make an Appointment?", "Confirm all appointment details?", JOptionPane.YES_NO_OPTION);
      if (confirmCreate == JOptionPane.YES_OPTION) {

         if (tblAppointment.getSelectionModel().isSelectionEmpty()) {
            // empty fields validation

            if (txtIC.getText().isBlank()
                    || txtName.getText().isBlank()
                    || cmbCentreName.getSelectedItem() == null
                    || cmbVaccineName.getSelectedItem() == null
                    || dtpDate1.getDate() == null
                    || dtpDate2.getDate() == null
                    || cmbTimeSlot1.getSelectedItem() == null
                    || txtTimeSlot2.getText().isBlank()) {
               JOptionPane.showMessageDialog(btnCreate, "Please ensure all the appointment details are filled!");
            } else {
               // checking if booking exist
               SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
               boolean found = DataIO.hasAppointment(cmbCentreName.getSelectedItem().toString(),
                       df.format(dtpDate1.getDate()),
                       cmbTimeSlot1.getSelectedItem().toString());
               if (found) {
                  JOptionPane.showMessageDialog(btnCreate, "Another user has already booked this slot!");
               } else {
                  // extra layer of validation if front end fails
                  boolean foundCentreSupply = DataIO.checkSupplyCentreExists(cmbCentreName.getSelectedItem().toString(),
                          cmbVaccineName.getSelectedItem().toString());
                  if (foundCentreSupply) {

                     Centre location = DataIO.checkCentre(cmbCentreName.getSelectedItem().toString());
                     VaccineSupply inventory = DataIO.checkSupply(cmbCentreName.getSelectedItem().toString(),
                             cmbVaccineName.getSelectedItem().toString());
                     // -2 in inventory
                     for (int i = 0; i < DataIO.allVaccines.size(); i++) {
                        if (inventory.getVaccineID() == DataIO.allVaccines.get(i).getVaccineID()) {
                           DataIO.allVaccines.get(i).reserve2Dose();
                        }
                     }
                     People person = DataIO.checkPeople(txtIC.getText().trim());
                     Appointment newAppointment = new Appointment(person,
                             df.format(dtpDate1.getDate()),
                             df.format(dtpDate2.getDate()),
                             cmbTimeSlot1.getSelectedItem().toString(),
                             txtTimeSlot2.getText().trim(),
                             location,
                             cmbVaccineName.getSelectedItem().toString());
                     DataIO.allAppointments.add(newAppointment);
                     DataIO.write();
                     JOptionPane.showMessageDialog(btnCreate, "Appointment has successfully been made!");
                     btnRefreshActionPerformed(evt);
                  } else {
                     JOptionPane.showMessageDialog(btnCreate, "Vaccine doesn't exist at this centre");
                  }
               }
            }
         } else {
            JOptionPane.showMessageDialog(btnCreate, "Please unselect a row");
         }
      }
   }//GEN-LAST:event_btnCreateActionPerformed

   private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
      DefaultTableModel model = (DefaultTableModel) tblAppointment.getModel();
      String input = txtSearch.getText();
      TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
      tblAppointment.setRowSorter(tr);
      tr.setRowFilter(RowFilter.regexFilter(input));
   }//GEN-LAST:event_txtSearchKeyReleased

   private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
      int confirmCreate = JOptionPane.showConfirmDialog(this, "Change appointment details?", "Confirm all appointment details?", JOptionPane.YES_NO_OPTION);
      if (confirmCreate == JOptionPane.YES_OPTION) {

         // empty fields validation
         if (dtpDate1.getDate() == null
                 || cmbCentreName.getSelectedItem() == null
                 || cmbTimeSlot1.getSelectedItem() == null
                 || cmbVaccineName.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(btnUpdate, "Please ensure all the appointment details are filled!");
         } else {
            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            String date1 = df.format(dtpDate1.getDate());
            String date2 = df.format(dtpDate2.getDate());
            // users current record
            Vaccine.app = DataIO.checkAppointment(txtIC.getText().trim());
            Centre location = DataIO.checkCentre(cmbCentreName.getSelectedItem().toString());
            // users new record
            boolean exists = DataIO.hasAppointment(cmbCentreName.getSelectedItem().toString(),
                    df.format(dtpDate1.getDate()),
                    cmbTimeSlot1.getSelectedItem().toString());

            // if record exists -> check if its the users current record (if no changes were made)
            if (exists) {
               // if no changes were made to time location and date, no updates are required
               // check if this new booking record exists already and is not the current owners existing booking
               Appointment comparison = DataIO.hasAppointment(cmbCentreName.getSelectedItem().toString(),
                       df.format(dtpDate1.getDate()),
                       cmbTimeSlot1.getSelectedItem().toString(),
                       df.format(dtpDate2.getDate()),
                       txtTimeSlot2.getText().trim());
               if (!txtIC.getText().equals(comparison.getPerson().getIcno())) {
                  JOptionPane.showMessageDialog(btnUpdate, "Another user has already booked this slot!");
               } else {
                  btnRefreshActionPerformed(evt);
                  JOptionPane.showMessageDialog(btnUpdate, "No changes have been made");
               }

            } else {
               VaccineSupply newSupply = DataIO.checkSupply(location.getCentreName(), cmbVaccineName.getSelectedItem().toString());
               VaccineSupply oldSupply = DataIO.checkSupply(tblAppointment.getValueAt(tblAppointment.getSelectedRow(), 2).toString(),
                       tblAppointment.getValueAt(tblAppointment.getSelectedRow(), 3).toString());
               // -2 from new location
               for (int i = 0; i < DataIO.allVaccines.size(); i++) {
                  if (newSupply.getVaccineID() == DataIO.allVaccines.get(i).getVaccineID()) {
                     DataIO.allVaccines.get(i).reserve2Dose();
                  }
               }
               // +2 from old location
               for (int i = 0; i < DataIO.allVaccines.size(); i++) {
                  if (oldSupply.getVaccineID() == DataIO.allVaccines.get(i).getVaccineID()) {
                     DataIO.allVaccines.get(i).unreserve2Dose();
                  }
               }
               Vaccine.app.setLocation(location);
               Vaccine.app.setVaccineName(cmbVaccineName.getSelectedItem().toString());
               Vaccine.app.setDate1(date1);
               Vaccine.app.setTime1(cmbTimeSlot1.getSelectedItem().toString());
               Vaccine.app.setDate2(date2);
               Vaccine.app.setTime2(txtTimeSlot2.getText());
               DataIO.write();
               btnRefreshActionPerformed(evt);
               JOptionPane.showMessageDialog(btnUpdate, "Appointment has been updated successfully!");
            }

         }
      }
   }//GEN-LAST:event_btnUpdateActionPerformed

   private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
// ------------ Table Information ------------
      DefaultTableModel model = (DefaultTableModel) tblAppointment.getModel();
      model.setRowCount(0);
      for (int i = 0; i < DataIO.allAppointments.size(); i++) {
         String icno = DataIO.allAppointments.get(i).getPerson().getIcno();
         String personName = DataIO.allAppointments.get(i).getPerson().getName();
         String centreName = DataIO.allAppointments.get(i).getLocation().getCentreName();
         String vaccineName = DataIO.allAppointments.get(i).getVaccineName();
         String date1 = DataIO.allAppointments.get(i).getDate1();
         String time1 = DataIO.allAppointments.get(i).getTime1();
         String date2 = DataIO.allAppointments.get(i).getDate2();
         String time2 = DataIO.allAppointments.get(i).getTime2();

         String dose = DataIO.checkDoses(icno);
         String array[] = {icno, personName, centreName, vaccineName, date1, time1, date2, time2, dose};
         model.addRow(array);
      }
      // recipient, centre, vaccine
      tblAppointment.getColumnModel().getColumn(1).setMinWidth(0);
      tblAppointment.getColumnModel().getColumn(1).setMaxWidth(0);
      tblAppointment.getColumnModel().getColumn(2).setMinWidth(0);
      tblAppointment.getColumnModel().getColumn(2).setMaxWidth(0);
      tblAppointment.getColumnModel().getColumn(3).setMinWidth(0);
      tblAppointment.getColumnModel().getColumn(3).setMaxWidth(0);

      // ------------ ComboBox Information ------------
      DefaultComboBoxModel comboCentre = (DefaultComboBoxModel) cmbCentreName.getModel();
      DefaultComboBoxModel comboVaccine = (DefaultComboBoxModel) cmbVaccineName.getModel();
      DefaultComboBoxModel comboTime1 = (DefaultComboBoxModel) cmbTimeSlot1.getModel();
      comboCentre.removeAllElements();
      comboVaccine.removeAllElements();
      comboTime1.removeAllElements();
      // setting Centre dropdown values
      for (int i = 0; i < DataIO.allCentres.size(); i++) {
         if (DataIO.allCentres.get(i).getStatus().equals("Active") && DataIO.allCentres.get(i).getMyInventory() != null) {
            comboCentre.addElement(DataIO.allCentres.get(i).getCentreName());
            lblCentreID.setText(String.valueOf(DataIO.allCentres.get(i).getCentreId()));
         }
      }
      // setting Vaccine Name dropdown values
      if (comboCentre.getSize() == 0) {
         comboCentre.addElement("No Centres available");
      } else {
         Vaccine.editCentre = DataIO.checkCentre(comboCentre.getSelectedItem().toString());
         for (int j = 0; j < DataIO.allVaccines.size(); j++) {
            if (Vaccine.editCentre.getCentreId() == DataIO.allVaccines.get(j).getCentre().getCentreId()) {
               if (DataIO.allVaccines.get(j).getInventory() >= 2) {
                  Vaccine.editCentre.getMyInventory().add(DataIO.allVaccines.get(j));

                  comboVaccine.addElement(DataIO.allVaccines.get(j).getVaccineName());
               }
            }
         }
      }
      // set up date chooser
      dtpDate1.setMinSelectableDate(new Date());
      // set up time dropdown values
      String[] time1 = DataIO.getTimeSlot1();
      for (String slot : time1) {
         comboTime1.addElement(slot);
      }

      btnClearActionPerformed(evt);

   }//GEN-LAST:event_btnRefreshActionPerformed

   private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
      int confirmCreate = JOptionPane.showConfirmDialog(this, "DELETE APPOINTMENT?", "Confirm deletion?", JOptionPane.YES_NO_OPTION);
      if (confirmCreate == JOptionPane.YES_OPTION) {
         try {
            Vaccine.app = DataIO.checkAppointment(txtIC.getText().trim());
            Vaccine.login = DataIO.checkPeople(txtIC.getText().trim());
            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            Date today = new Date();
            String dateRecorded = Vaccine.app.getDate1();
            String date1 = df.format(dtpDate1.getDate());
            String dateToday = df.format(today);
            // if have not reached the appointment date, allow to be deleted
            if (df.parse(dateToday).before(df.parse(dateRecorded))) {

               for (int i = 0; i < DataIO.allAppointments.size(); i++) {
                  if (Vaccine.app == DataIO.allAppointments.get(i)) {
                     DataIO.allAppointments.remove(i);
                     break;
                  }
               }

               VaccineSupply inventory = DataIO.checkSupply(cmbCentreName.getSelectedItem().toString(), cmbVaccineName.getSelectedItem().toString());
               // +2 back in inventory
               for (int i = 0; i < DataIO.allVaccines.size(); i++) {
                  if (inventory.getVaccineID() == DataIO.allVaccines.get(i).getVaccineID()) {
                     DataIO.allVaccines.get(i).unreserve2Dose();
                  }
               }
               DataIO.write();
               JOptionPane.showMessageDialog(btnDelete, "The appointment has been deleted");
               btnRefreshActionPerformed(evt);
            } else {
               JOptionPane.showMessageDialog(btnDelete, "This appointment cannot be deleted");
            }

         } catch (ParseException ex) {
            Logger.getLogger(UserStatus.class.getName()).log(Level.SEVERE, null, ex);
         }
      }
   }//GEN-LAST:event_btnDeleteActionPerformed

   private void tblAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAppointmentMouseClicked
      // setting up fields for selected row
      // icno
      txtIC.setText(tblAppointment.getValueAt(tblAppointment.getSelectedRow(), 0).toString());
      txtIC.setEnabled(false);
      // name
      txtName.setText(tblAppointment.getValueAt(tblAppointment.getSelectedRow(), 1).toString());
      txtName.setEnabled(false);
      // centre combobox
      String centreName = tblAppointment.getValueAt(tblAppointment.getSelectedRow(), 2).toString();
      for (int i = 0; i < cmbCentreName.getModel().getSize(); i++) {
         if (cmbCentreName.getItemAt(i).toString().equals(centreName)) {
            cmbCentreName.setSelectedIndex(i);
            break;
         }
      }
      // vaccine combobox
      String vaccineName = tblAppointment.getValueAt(tblAppointment.getSelectedRow(), 3).toString();
      for (int i = 0; i < cmbVaccineName.getModel().getSize(); i++) {
         if (cmbVaccineName.getItemAt(i).toString().equals(vaccineName)) {
            cmbVaccineName.setSelectedIndex(i);
            break;
         }
      }
      // 1st & 2nd dose date
      try {
         SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
         Date date1, date2;
         date1 = df.parse(tblAppointment.getValueAt(tblAppointment.getSelectedRow(), 4).toString());
         date2 = df.parse(tblAppointment.getValueAt(tblAppointment.getSelectedRow(), 6).toString());
         dtpDate1.setDate(date1);
         dtpDate2.setDate(date2);

      } catch (ParseException ex) {
         Logger.getLogger(UserStatus.class.getName()).log(Level.SEVERE, null, ex);
      }
      // time 1 and 2
      String timeslot1 = tblAppointment.getValueAt(tblAppointment.getSelectedRow(), 5).toString();
      String timeslot2 = tblAppointment.getValueAt(tblAppointment.getSelectedRow(), 7).toString();
      txtTimeSlot2.setText(timeslot2);
      for (int i = 0; i < cmbTimeSlot1.getModel().getSize(); i++) {
         if (cmbTimeSlot1.getItemAt(i).toString().equals(timeslot1)) {
            cmbTimeSlot1.setSelectedIndex(i);
            break;
         }
      }
   }//GEN-LAST:event_tblAppointmentMouseClicked

   private void lblCentreIDInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_lblCentreIDInputMethodTextChanged

   }//GEN-LAST:event_lblCentreIDInputMethodTextChanged

   private void lblCentreIDPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lblCentreIDPropertyChange
      DefaultComboBoxModel comboVaccine = (DefaultComboBoxModel) cmbVaccineName.getModel();
      if (!lblCentreID.getText().equals("")) {
         // setting Vaccine Name
         comboVaccine.removeAllElements();
         Centre selected = DataIO.checkCentre(Integer.valueOf(lblCentreID.getText().trim()));
         if (selected != null) {
            for (int j = 0; j < DataIO.allVaccines.size(); j++) {
               if (selected.getCentreId() == DataIO.allVaccines.get(j).getCentre().getCentreId()) {
                  if (DataIO.allVaccines.get(j).getInventory() >= 2) {
                     comboVaccine.addElement(DataIO.allVaccines.get(j).getVaccineName());
                  }
               }
            }
         }
      }
   }//GEN-LAST:event_lblCentreIDPropertyChange

   private void cmbCentreNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbCentreNameMouseClicked
      DefaultComboBoxModel comboBoxModel = (DefaultComboBoxModel) cmbCentreName.getModel();
      if (comboBoxModel.getSelectedItem() != null) {
         String selectedCentre = comboBoxModel.getSelectedItem().toString();
         Centre selected = DataIO.checkCentre(selectedCentre);
         lblCentreID.setText(String.valueOf(selected.getCentreId()));
      }
   }//GEN-LAST:event_cmbCentreNameMouseClicked

   private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
      // TODO add your handling code here:
   }//GEN-LAST:event_txtSearchActionPerformed

   private void txtICFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtICFocusLost
      if (!txtIC.getText().isBlank()) {
         Vaccine.login = DataIO.checkPeople(txtIC.getText().trim());
         if (Vaccine.login == null) {
            txtName.setText("");
            JOptionPane.showMessageDialog(txtIC, "IC No not found.");
         } else {
            txtIC.setText(Vaccine.login.getIcno());
            txtName.setText(Vaccine.login.getName());
         }
      }
   }//GEN-LAST:event_txtICFocusLost

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
      /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(AdminAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(AdminAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(AdminAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(AdminAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            new AdminAppointment().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnBack;
   private javax.swing.JButton btnClear;
   private javax.swing.JButton btnCreate;
   private javax.swing.JButton btnDelete;
   private javax.swing.JButton btnRefresh;
   private javax.swing.JButton btnUpdate;
   private javax.swing.JComboBox<String> cmbCentreName;
   private javax.swing.JComboBox<String> cmbTimeSlot1;
   private javax.swing.JComboBox<String> cmbVaccineName;
   private com.toedter.calendar.JDateChooser dtpDate1;
   private com.toedter.calendar.JDateChooser dtpDate2;
   private javax.swing.JLabel jLabel11;
   private javax.swing.JLabel jLabel12;
   private javax.swing.JLabel jLabel13;
   private javax.swing.JLabel jLabel14;
   private javax.swing.JLabel jLabel15;
   private javax.swing.JLabel jLabel16;
   private javax.swing.JLabel jLabel17;
   private javax.swing.JLabel jLabel18;
   private javax.swing.JLabel jLabel19;
   private javax.swing.JLabel jLabel20;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JLabel lblCentreID;
   private javax.swing.JLabel lblVaccineID;
   private javax.swing.JTable tblAppointment;
   private javax.swing.JTextField txtIC;
   private javax.swing.JTextField txtName;
   private javax.swing.JTextField txtSearch;
   private javax.swing.JTextField txtTimeSlot2;
   // End of variables declaration//GEN-END:variables
}
